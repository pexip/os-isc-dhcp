#! /bin/sh /usr/share/dpatch/dpatch-run
## dhclient-more-debug.dpatch by Martin Pitt <martin.pitt@ubuntu.com>
##
## DP: Show offered/requested client IP in log, for better debugging.
## DP: Ubuntu: https://launchpad.net/bugs/35265
## DP: Forwarded to dhcp-bugs@isc.org, Debian #486611
## DP: Patch by Peter Miller <millerp@canb.auug.org.au>

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' isc-dhcp~/client/dhclient.c isc-dhcp/client/dhclient.c
--- isc-dhcp~/client/dhclient.c	2010-11-01 17:22:41.000000000 +0000
+++ isc-dhcp/client/dhclient.c	2010-11-01 17:22:41.000000000 +0000
@@ -969,6 +969,7 @@
 	struct interface_info *ip = packet -> interface;
 	struct client_state *client;
 	struct client_lease *lease;
+	char *leasestr;
 	struct option_cache *oc;
 	struct data_string ds;
 
@@ -999,13 +1000,16 @@
 		return;
 	}
 
-	log_info ("DHCPACK from %s", piaddr (packet -> client_addr));
-
 	lease = packet_to_lease (packet, client);
 	if (!lease) {
+		log_info ("DHCPACK from %s", piaddr (packet -> client_addr));
 		log_info ("packet_to_lease failed.");
 		return;
 	}
+	leasestr = strdup (piaddr (lease -> address));
+	log_info ("DHCPACK of %s from %s", leasestr,
+		  piaddr (packet -> client_addr));
+	free (leasestr);
 
 	client -> new = lease;
 
@@ -1413,6 +1417,7 @@
 	struct interface_info *ip = packet -> interface;
 	struct client_state *client;
 	struct client_lease *lease, *lp;
+	char *leasestr;
 	struct option **req;
 	int i;
 	int stop_selecting;
@@ -1491,6 +1496,10 @@
 		log_info ("%s: packet_to_lease failed.", obuf);
 		return;
 	}
+	leasestr = strdup (piaddr (lease -> address));
+	sprintf (obuf, "%s of %s from %s", name, leasestr,
+		 piaddr (packet -> client_addr));
+	free (leasestr);
 
 	/* If this lease was acquired through a BOOTREPLY, record that
 	   fact. */
@@ -2092,7 +2101,10 @@
 			client -> packet.secs = htons (65535);
 	}
 
-	log_info ("DHCPREQUEST on %s to %s port %d",
+	log_info ("DHCPREQUEST of %s on %s to %s port %d", 
+              piaddr ((client -> state == S_BOUND || client -> state ==
+		       S_RENEWING || client -> state == S_REBINDING) ?
+		       client -> active -> address : client -> requested_address),
 	      client -> name ? client -> name : client -> interface -> name,
 	      inet_ntoa (destination.sin_addr),
 	      ntohs (destination.sin_port));
